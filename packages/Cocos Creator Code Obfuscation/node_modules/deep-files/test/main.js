import test from 'ava'
import path from 'path'
import deepFiles from '../'

const result = [
  'test/fixtures/bar/bag.html',
  'test/fixtures/bar/bom/dan.md',
  'test/fixtures/foo/baz.html',
  'test/fixtures/foo/nut.md'
]

test.cb('should work for nested files', t => {
  deepFiles('test/fixtures', '*.{html,md}').forEach(file => {
    t.true(result.includes(path.relative(process.cwd(), file)))
  })
  t.end()
})

test.cb('should work for single file with pattern', t => {
  deepFiles('test/fixtures/foo', '*.md').forEach(file => {
    t.is(result[3], path.relative(process.cwd(), file))
  })
  t.end()
})

test.cb('should work for single file without pattern', t => {
  deepFiles('test/fixtures/foo/baz.html').forEach(file => {
    t.is(result[2], path.relative(process.cwd(), file))
  })
  t.end()
})

test.cb('should throw error for non existing', t => {
  t.throws(() => deepFiles('test/fixture'), /ENOENT/)
  t.end()
})

test.cb('should return empty array if nothing found', t => {
  t.is(deepFiles('test/fixtures', '*.txt').length, 0)
  t.end()
})
